<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" href="/css/chat.css" />
  <meta charset="UTF-8" />
  <title><%= target[0].name %>님과 채팅방</title>
</head>
<body>
    <div id="chat-container">
  <div class="chat-header">
  <h2><%= who %> ↔ <%= target[0].name %> 1:1 채팅</h2>
  <a href="/chat" class="back-to-chatlist">채팅방 메뉴로 돌아가기</a>
</div>

 

  <ul id="chat"></ul>

  <div class="input-area">
    <input id="msg" autocomplete="off" placeholder="메시지 입력" />
    <button id="sendBtn">전송</button>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const me = "<%= result[0].loginid %>";
    const target = "<%= target[0].loginid %>";

    function getRoomId(user1, user2) {
      return [user1, user2].sort().join('_');
    }

    const room = getRoomId(me, target);

    socket.emit('join_room', room); // 방 참가 요청

    // 메시지 전송 함수
    function sendMessage() {
      const input = document.getElementById('msg');
      const message = input.value.trim();
      if (!message) return;

      // 서버에 메시지 전송
      socket.emit('private_room_message', {
        room,
        to: target,
        message,
      });

      // 내 메시지 화면에 추가
      appendMessage(`나: ${message}`, 'mine');
      input.value = '';
      input.focus();
    }

    // 메시지 출력 함수
    function appendMessage(text, type) {
      const li = document.createElement('li');
      li.textContent = text;
      li.classList.add(type);
      document.getElementById('chat').appendChild(li);

      // 스크롤을 항상 아래로 유지
      const chat = document.getElementById('chat');
      chat.scrollTop = chat.scrollHeight;
    }

    // 전송 버튼 클릭 이벤트 연결
    document.getElementById('sendBtn').addEventListener('click', sendMessage);

    // 엔터키로도 전송 가능하게
    document.getElementById('msg').addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        sendMessage();
      }
    });

    // 이전 메시지 받기
    socket.on('previous_messages', (messages) => {
        messages.forEach(({ sender, message }) => {
        console.log(`me: "${me}", sender: "${sender}"`);

    const isMine = sender.trim().toLowerCase() === me.trim().toLowerCase();
        console.log(`isMine?`, isMine);
    const type = isMine ? 'mine' : 'others';
    const prefix = isMine ? '나' : sender;
    appendMessage(`${prefix}: ${message}`, type);
  });
});


    // 실시간 메시지 받기
    socket.on('private_room_message', ({ from, message }) => {
      // 내 메시지는 이미 내가 화면에 출력했으니 제외
      if (from !== me) {
        appendMessage(`${from}: ${message}`, 'others');
      }
    });
  </script>
  </div>
</body>
</html>