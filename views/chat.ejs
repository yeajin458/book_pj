<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" href="/css/chat.css" />
  <meta charset="UTF-8" />
  <title><%= target[0].name %>님과 채팅방</title>
</head>
<body>
  <div id="chat-container">
    <div class="chat-header">
      <h2><%= who %> ↔ <%= target[0].name %> 1:1 채팅</h2>
      <a href="/chat" class="back-to-chatlist">채팅방 메뉴로 돌아가기</a>
    </div>

    <ul id="chat"></ul>

    <!-- form 태그 사용 -->
    <form id="chatForm" class="input-area">
      <input id="msg" autocomplete="off" placeholder="메시지 입력" />
      <button type="submit">전송</button>
    </form>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const me = "<%= result[0].loginid %>";
    const target = "<%= target[0].loginid %>";
    const chatList = document.getElementById('chat');
    const msgInput = document.getElementById('msg');
    const form = document.getElementById('chatForm');

    // 방 ID 생성
    function getRoomId(user1, user2) {
      return [user1, user2].sort().join('_');
    }
    const room = getRoomId(me, target);

    socket.emit('join_room', room); // 방 참가 요청

    // 메시지 출력 함수 (아이디 없이 메시지만 출력)
    function appendMessage(text, type) {
      const li = document.createElement('li');
      li.textContent = text;
      li.classList.add(type);
      chatList.appendChild(li);

      chatList.scrollTop = chatList.scrollHeight;
    }

    // 메시지 전송
    function sendMessage() {
      const message = msgInput.value.trim();
      if (!message) return;

      socket.emit('private_room_message', {
        room,
        to: target,
        message,
      });

      appendMessage(message, 'mine'); // 내 메시지 (아이디 안 붙임)
      msgInput.value = '';
      msgInput.focus();
    }

    // form 이벤트 (Enter/버튼 클릭 모두 처리)
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      sendMessage();
    });

    // 이전 메시지 받기 (fragment 사용)
    socket.on('previous_messages', (messages) => {
      const fragment = document.createDocumentFragment();
      messages.forEach(({ sender, message }) => {
        const li = document.createElement('li');
        li.textContent = message; // 메시지만 표시
        li.classList.add(sender.trim().toLowerCase() === me.trim().toLowerCase() ? 'mine' : 'others');
        fragment.appendChild(li);
      });
      chatList.appendChild(fragment);
      chatList.scrollTop = chatList.scrollHeight;
    });

    // 실시간 메시지 받기
    socket.on('private_room_message', ({ from, message }) => {
      if (from !== me) {
        appendMessage(message, 'others'); // 메시지 내용만
      }
    });
  </script>
</body>
</html>
